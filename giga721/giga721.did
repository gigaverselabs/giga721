type Time = nat64;

//HttpRequest related types
type HeaderField = record { text; text; };

type HttpRequest = record {
  method: text;
  url: text;
  headers: vec HeaderField;
  body: blob;
};

type HttpResponse = record {
  status_code: nat16;
  headers: vec HeaderField;
  body: blob;
};

type StreamingCallbackHttpResponse = record {
  body: blob;
  token: opt Token;
};

type StreamingStrategy = variant {
  Callback: record {
    callback: func (Token) -> (StreamingCallbackHttpResponse) query;
    token: Token;
  };
};

type Property = 
 record {
   name: text;
   value: text;
 };

type MintRequest = 
 record {
   contentType: text;
   data: vec nat8;
   desc: text;
   name: text;
   properties: vec Property;
   url: text;
   owner: principal;
 };

type Asset = 
 record {
   name: text;
   content_type: text;
   data: vec nat8;
 };

  type TransferRequest = 
  record {
    to: principal;
    token_id: nat;
  };
type Token =
record {
   id: nat;
   url: text;
   name: text;
   desc: text;
   properties: vec Property;
};
 type TokenDesc = 
 record {
   desc: text;
   id: nat;
   name: text;
   owner: principal;
   properties: vec Property;
   url: text;
 };
 type Owner = 
 record {
   id: nat;
   owner: principal;
 };

 type Listing = 
 record {
   owner: principal;
   price: nat64;
   time: Time;
   token_id: nat;
 };

 type ICPTs = record {e8s: nat64;};
 type TransactionNotification = 
 record {
   amount: ICPTs;
   block_height: nat64;
   from: principal;
   from_subaccount: opt nat8;
   memo: nat64;
   to: principal;
   to_subaccount: opt nat8;
 };

 type Result = 
 variant {
   Err: text;
   Ok: nat64;
 };

  type Result2 = 
 variant {
   Err: text;
   Ok: null;
 };

 type Operation = 
 variant {
   delist;
   init;
   list;
   mint;
   purchase;
   transfer;
 };

 type OpRecord = 
 record {
   caller: principal;
   from: opt principal;
   index: nat64;
   memo: nat64;
   op: Operation;
   price: opt nat64;
   timestamp: Time;
   to: opt principal;
   token_id: nat32;
 };
 type Stats = 
 record {
   highest_sell: nat64;
   volume_traded: nat64;
   owners: nat64;
   listings: nat64;
 };

service : (text, text, text, nat, principal) -> {

  //Internet computer related endpoints, will be upgraded to inclide more stats
  http_request: (request: HttpRequest) -> (HttpResponse) query;
  get_ledger_canister: () -> (opt principal) query;
  get_cycles: () -> (nat) query;

  //Collection state and basic data (similar to ERC721)
  name: () -> (text) query;
  symbol: () -> (text) query;
  description: () -> (text) query;
  icon_url: () -> (text) query;
  owner: () -> (principal) query;
  total_supply: () -> (nat) query;

  //Paused canister will reject, transfers, listings and purchases
  is_paused: () -> (bool) query;
  set_paused: (bool) -> (bool);

  creators_fee: () -> (nat) query;
  set_creators_fee: (nat) -> (bool);

  creators_address: () -> (opt principal) query;
  set_creators_address: (principal) -> (bool);

  //Management, owner only
  add_genesis_record: () -> (Result);

  set_ledger_canister: (principal) -> (bool);
  set_owner: (principal) -> (bool);
  set_description: (text) -> (bool);
  set_icon_url: (text) -> (bool);

  
  //Token Data
  //Returns ids of minted tokens
  tokens: () -> (vec nat) query;
  //Returns data of given token, including owner and metadata
  data_of: (nat) -> (TokenDesc) query;
  //Returns owner of token
  owner_of: (nat) -> (principal) query;
  //Returns all tokens with their owners
  owners: () -> (vec Owner) query;
  //Returns user tokens
  user_tokens: (principal) -> (vec nat) query;

  transfer_to: (principal, nat) -> (bool);


  //Ledger, token history
  all_history: () -> (vec OpRecord) query;
  get_history_by_index: (nat) -> (opt OpRecord) query;
  //Returns history of given token_id
  get_history_by_token: (nat) -> (vec OpRecord) query;
  stats: () -> (Stats) query;
  tx_amount: () -> (nat) query;
  
  //Migration
  upload_history: (vec OpRecord) -> (bool);
  upload_token_owners: (vec Owner) -> (bool);
  
  //Trading of tokens
  tx_enabled: () -> (bool) query;
  set_tx_enabled: (bool) -> (bool);
  get_listed_count: () -> (nat) query;
  //Returns all current listings
  listings: () -> (vec Listing) query;
  list: (nat, nat64) -> (Result);
  delist: (nat) -> (Result);
  transaction_notification: (TransactionNotification) -> (Result);

  //Minting and burning
  mint_for: (nat, principal) -> (Result);
  burn: (nat) -> (Result);

  //Assets management and metadata
  upload_asset: (Asset) -> (Result2);
  upload_tokens_metadata: (vec Token) -> (Result2);
  metadata: () -> (vec Token);
}