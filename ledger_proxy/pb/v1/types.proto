syntax = "proto3";

package ic_ledger.pb.v1;

import "descriptor.proto";

// The annotated message is supported by hardware wallet signing.
// The numbering was chosen as the range 19000-19999 is anyway reserved in protobuf.
extend google.protobuf.MessageOptions {
  bool tui_signed_message = 20000;
}
// The annotated field is displayed on the hardware wallet in the specification
// used by launch of the Internet Computer.
extend google.protobuf.FieldOptions {
  bool tui_signed_display_q2_2021 = 20001;
}


// import "base_types.proto";

// Annotations related to the use of hardware wallets. The annotated messages are
// parsed on hardware wallets and marked fields are displayed in a trusted user
// interface (TUI). We must not, for instance, add fields that would change the
// semantics of the message such that old hardware wallets would not display
// appropriate information to users.

// ** LEDGER CANISTER ENDPOINTS

message PrincipalId {
  option (tui_signed_message) = true;
  bytes serialized_id = 1      [(tui_signed_display_q2_2021) = true];
}


// * Shared Endpoints *

// Get a single block
message BlockRequest {
  uint64 block_height = 1;
}

message EncodedBlock {
  bytes block = 1;
}

message BlockResponse {
  oneof block_content {
    EncodedBlock block = 1;
    PrincipalId canister_id = 2;
  }
}

// Get a set of blocks
// message GetBlocksRequest {
//   uint64 start = 1;
//   uint64 length = 2;
// }

// message Refund {
//   BlockHeight refund = 2;
//   string error = 3;
// }

// message ToppedUp {
// }

// message EncodedBlocks {
//     repeated EncodedBlock blocks = 1;
// }

// message GetBlocksResponse {
//   oneof get_blocks_content {
//     EncodedBlocks blocks = 1;
//     string error = 2;
//   }
// }

// // Iterate through blocks
// message IterBlocksRequest {
//   uint64 start = 1;
//   uint64 length = 2;
// }

// message IterBlocksResponse {
//   repeated EncodedBlock blocks = 1;
// }

// message ArchiveIndexEntry {
//   uint64 height_from = 1;
//   uint64 height_to = 2;
//   PrincipalId canister_id = 3;
// }

// message ArchiveIndexResponse {
//   repeated ArchiveIndexEntry entries = 1;
// }


// ** ARCHIVE CANISTER ENDPOINTS **

// * Archive canister *
// Init the archive canister
message ArchiveInit {
  uint32 node_max_memory_size_bytes = 1;
  uint32 max_message_size_bytes = 2;
}


// Add blocks to the archive canister
message ArchiveAddRequest {
  repeated Block blocks = 1;
}

message ArchiveAddResponse {
}


// Fetch a list of all of the archive nodes
// message GetNodesRequest {
// }

// message GetNodesResponse {
//   repeated PrincipalId nodes = 1;
// }


// ** BASIC TYPES **
message Tokens {
  option (tui_signed_message) = true;
  uint64 e8s = 1       [(tui_signed_display_q2_2021) = true];

}

message Payment {
  option (tui_signed_message) = true;
  Tokens receiver_gets = 1      [(tui_signed_display_q2_2021) = true];

}

message BlockHeight {
  option (tui_signed_message) = true;
  uint64 height = 1      [(tui_signed_display_q2_2021) = true];
}


// This is the
message Block {
  Hash parent_hash = 1;
  TimeStamp timestamp = 2;
  Transaction transaction = 3;
}

message Hash {
  bytes hash = 1;
}

message Account {
  AccountIdentifier identifier = 1;
  Tokens balance = 2;
}

message Transaction {
  oneof transfer {
    Burn burn = 1;
    Mint mint = 2;
    Send send = 3;
  }
  Memo memo = 4;
  BlockHeight created_at = 5; // obsolete
  TimeStamp created_at_time = 6;
}

message Send {
  AccountIdentifier from = 1;
  AccountIdentifier to = 2;
  Tokens amount = 3;
  Tokens max_fee = 4;
}

message Mint {
  AccountIdentifier to = 2;
  Tokens amount = 3;
}

message Burn {
  AccountIdentifier from = 1;
  Tokens amount = 3;
}


message AccountIdentifier {
  option (tui_signed_message) = true;
  // Can contain either:
  //  * the 32 byte identifier (4 byte checksum + 28 byte hash)
  //  * the 28 byte hash
  bytes hash = 1        [(tui_signed_display_q2_2021) = true];

}

message Subaccount {
  option (tui_signed_message) = true;
  bytes sub_account = 1 [(tui_signed_display_q2_2021) = true];

}

message Memo {
  option (tui_signed_message) = true;
  uint64 memo = 1       [(tui_signed_display_q2_2021) = true];

}

message TimeStamp {
  uint64 timestamp_nanos = 1;
}

message Certification {
  bytes certification = 1;
}
